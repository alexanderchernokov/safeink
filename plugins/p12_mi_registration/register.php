<?php
if(!defined('IN_PRGM')) exit();

//SD343: hashing against spammers/bots; must be the same as in "header.php"!!!
$p12_hash = date('H').USERIP;
$p12_honeypot_hash = 'p'.md5($p12_hash.'dummyvalue');

// ############################################################################
// FORGOT PASSWORD FORM
// ############################################################################

function p12_ForgotPasswordForm($errors_arr)
{
  global $categoryid, $mainsettings, $p12_language, $p12_settings, $p12_email_hash;

  echo '<div id="p12_registration">
    '.(isset($p12_settings['reset_password_title'])?$p12_settings['reset_password_title']:''). '
    <form action="' . RewriteLink('index.php?categoryid='.$categoryid.'&p12_forgotpwd=1') .
     '" id="p12_resetpassword" name="p12_resetpassword" method="post">
     ' . PrintSecureToken('p12_token') . '
    ';

  if(!empty($errors_arr))
  {
    DisplayMessage($errors_arr, true, '');
  }
  else
  {
    // Hidden div for error messages generated by JS validation
    echo '<div class="error_message" style="display: none;"></div>';
  }
  $email = GetVar('p12_email', '', 'string', true, false);

  echo '<p>
    <label for="'.$p12_email_hash.'">' . $p12_language['email'] . '</label>
    <input class="textInput auto" id="'.$p12_email_hash.'" name="'.$p12_email_hash.'" type="text" value="'.$email.'" autocomplete="off" size="30" maxlength="200" />
    </p>';
  //SD342 - force captcha for security
  DisplayCaptcha(true,'p12',(empty($mainsettings['captcha_method'])?2:$mainsettings['captcha_method']));
  echo '<br />
    <input type="submit" name="p12_pwdreset" value="' . strip_tags($p12_language['pwd_reset']) . '" />
  </form>
  </div>
  ';

} //p12_ForgotPasswordForm


// ############################################################################
// REGISTER USER
// ############################################################################

function p12_ResetPassword()
{
  global $DB, $categoryid, $mainsettings, $userinfo, $sdlanguage,
         $p12_language, $p12_settings, $p12_email_hash;

  // SD313: security check against spam/bot submissions
  if(!CheckFormToken('p12_token', false))
  {
    RedirectPage(RewriteLink('index.php?categoryid=' . $categoryid),'<strong>'.$sdlanguage['error_invalid_token'].'</strong><br />',2,true);
    return;
  }
  sleep(2); # distraction
  $errors = array();
  $email_old = trim(GetVar($p12_email_hash, '', 'string', true, false));
  $email = trim(htmlentities(strip_tags(unhtmlspecialchars($email_old))));
  if(!strlen($email) || (strlen($email) > 200) || !IsValidEmail($email))
  {
    $errors[] = $p12_language['email_not_found'];
  }
  else
  {
    if(!CaptchaIsValid('p12',(empty($mainsettings['captcha_method'])?2:$mainsettings['captcha_method'])))
    {
      $errors[] = $sdlanguage['captcha_not_valid'];
    }

    // check to see if email address exists
    if(empty($errors) && ($email == $email_old) && empty($userinfo['loggedin']) &&
       ($user = $DB->query_first("SELECT userid, username, email FROM {users} WHERE trim(email) = '%s'",
                                 $DB->escape_string($email))))
    {
      // generate new password
      $min_pwd_length = $p12_settings['min_password_length'];
      $min_pwd_length = (empty($min_pwd_length) || $min_pwd_length < 6) ? 6 : (int)$min_pwd_length;
      $newpass        = sd_GeneratePassword($min_pwd_length);
      $salt           = sd_generate_user_salt(); //SD342 salt passwords now

      // send email
      $subject = $p12_language['email_subject'];
      $message = $user['username'] . ","  . EMAIL_CRLF  . EMAIL_CRLF .
                 $p12_language['email_message']  . EMAIL_CRLF . EMAIL_CRLF .
                 $newpass;
      if(SendEmail($user['email'], $subject, $message))
      {
        //SD342: only change user if email was actually sent!
        $DB->query("UPDATE {users} SET password = '%s', use_salt=1, salt='%s' WHERE userid = %d",
                   md5($salt.md5($newpass)), $DB->escape_string($salt), $user['userid']);
        echo $p12_language['password_reset_success'];
        WatchDog('Usersystem','Password reset for email: <strong>'.$email.'</strong> (IP: <span class="ipaddress">'.USERIP.'</span>)',WATCHDOG_NOTICE);
      }
      else
      {
        global $SD_EMAIL_ERROR;
        $errors = isset($SD_EMAIL_ERROR) ? $SD_EMAIL_ERROR : array();
      }
    }
  }

  if(!empty($errors))
  {
    p12_ForgotPasswordForm($errors);
  }
} //p12_ResetPassword


// ############################ VALIDATE FORM #################################

function p12_Validation($validationKey)
{
  global $DB, $p12_language, $p12_settings;

  sleep(2); # distraction
  // Regular expression to validate guid
  $regex = '{########-####-####-####-############}';
  $regex = str_replace('#', '[0-9,A-F]', $regex);
  //SD332: expiration (in days)
  $expire = empty($p12_settings['activation_link_expiration']) ? 14 : (int)$p12_settings['activation_link_expiration'];
  $expire = Is_Valid_Number($expire,14,2,365);

  // Check to see if validation key exists
  //SD322: validation keys expire after e.g. 14 days
  $DB->result_type = MYSQL_ASSOC;
  if(preg_match($regex, $validationKey) &&
    ($user = $DB->query_first(
     "SELECT userid, activated, email FROM {users} WHERE validationkey = '%s' AND validation_time > %d LIMIT 1",
      $DB->escape_string($validationKey), (TIME_NOW - ($expire * 86400)))))
  {
    if(empty($user['activated']))
    {
      //SD343: validation can be combined with option to require admin approval
      $require = empty($p12_settings['require_admin_activation']) ? 0 : 1;
      if(!$require) //SD343
      {
        $DB->query("UPDATE {users} SET activated = 1, validationkey = '', validation_time = 0 WHERE userid = %d", $user['userid'], TIME_NOW);
        echo $p12_language['validation_success'];
        p12_SendWelcomeMessage($user['userid']); //SD342
      }
      else
      {
        $DB->query("UPDATE {users} SET validationkey = '', validation_time = 0 WHERE userid = %d", $user['userid'], TIME_NOW);
        echo $p12_language['registration_awaits_approval'];
      }
      //SD370: send admin notification email depending on new option
      $doAdminEmail = empty($p12_settings['new_registration_admin_usage'])?0:(int)$p12_settings['new_registration_admin_usage'];
      if( ($doAdminEmail == 2) ||                # always
          ( $require && ($doAdminEmail == 0)) || # if activation is required (default)
          (!$require && ($doAdminEmail == 1)) )  # if activation is not required
      {
        p12_SendAdminApprovalMessage($user['userid']); //SD343
      }
    }
    else
    {
      echo $p12_language['already_validated'];
    }
  }
  else
  {
    echo $p12_language['validation_key_not_found'];
  }
} //p12_Validation


function p12_SendWelcomeMessage($userid)
{
  global $DB, $p12_settings, $mainsettings_websitetitle_original, $sdurl;

  if(empty($userid)) return false;
  $user = $DB->query_first('SELECT userid, activated, email, username, joindate FROM {users} WHERE userid = %d', $userid);
  if(empty($user['userid']) || empty($user['activated'])) return false;

  //SD342: send welcome message after activation
  if(!empty($p12_settings['send_welcome_email_message']))
  {
    $subject = trim($p12_settings['welcome_message_subject']);
    $message = trim($p12_settings['welcome_message_text']);
    if(strlen($subject) && strlen($message))
    {
      //SD343: added "[joindate]"
      $subject = str_replace(array('[username]', '[date]', '[joindate]', '[email]', '[siteurl]', '[sitename]'),
                             array($user['username'], DisplayDate(TIME_NOW), DisplayDate($user['joindate']), $user['email'], $sdurl,      $mainsettings_websitetitle_original), $subject);
      $message = str_replace(array('[username]', '[date]', '[joindate]', '[email]', '[siteurl]', '[sitename]'),
                             array($user['username'], DisplayDate(TIME_NOW), DisplayDate($user['joindate']), $user['email'], $sdurl,      $mainsettings_websitetitle_original), $message);
      SendEmail($user['email'], $subject, $message, $p12_settings['welcome_message_email_from'], $p12_settings['welcome_message_email_sender'], null, null, true);
    }
  }
} //p12_SendWelcomeMessage


function p12_SendAdminApprovalMessage($userid)
{
  global $DB, $p12_settings, $p12_language, $sdurl, $mainsettings_websitetitle_original;

  if(empty($userid)) return false;
  $user = $DB->query_first('SELECT userid, activated, email, username FROM {users} WHERE userid = %d', $userid);
  if(empty($user['userid'])) return false;
  if(empty($user['activated']))
  {
    $user_link = '<a href="'.SITE_URL.ADMIN_PATH.'/users.php?action=display_user_form&userid='.$userid.'">'.$user['username'].'</a>';
    WatchDog('Registration',$p12_language['user_activation_required'].
             ' <strong>'.$user_link.'</strong> (IP: <span class="ipaddress">'.USERIP.'</span>)',
             WATCHDOG_NOTICE);
    unset($user_link);
  }
  if(empty($p12_settings['new_registration_admin_email']))
  {
    return false;
  }

  $subject = trim($p12_settings['new_registration_email_subject']);
  $subject = empty($subject) ? 'New user [username] - activation required ([date])' : $subject;
  $message = trim($p12_settings['new_registration_email_message']);
  if(strlen($message))
  {
    $subject = str_replace(array('[username]',      '[date]',             '[email]',      '[ipaddress]', '[siteurl]', '[sitename]'),
                           array($user['username'], DisplayDate(TIME_NOW), $user['email'], USERIP,        $sdurl,      $mainsettings_websitetitle_original), $subject);
    $message = str_replace(array('[username]',      '[date]',             '[email]',      '[ipaddress]', '[siteurl]', '[sitename]'),
                           array($user['username'], DisplayDate(TIME_NOW), $user['email'], USERIP,        $sdurl,      $mainsettings_websitetitle_original), $message);
    SendEmail($p12_settings['new_registration_admin_email'], $subject, $message, '', '', null, null, true);
  }
} //p12_SendWelcomeMessage


// ############################################################################
// PRINT FORM
// ############################################################################

function p12_DisplayRegistrationForm($errors_arr=array())
{
  global $DB, $categoryid, $sdlanguage, $userinfo,
         $p12_language, $p12_settings,
         $p12_hash, $p12_honeypot_hash, $UserProfile;

  $p12_username_hash = 'p'.md5($p12_hash.'p12_username');
  $p12_password_hash = 'p'.md5($p12_hash.'p12_password');
  $p12_passwordconfirm_hash = 'p'.md5($p12_hash.'p12_passwordconfirm');
  $p12_email_hash = 'p'.md5($p12_hash.'p12_email');
  $p12_emailconfirm_hash = 'p'.md5($p12_hash.'p12_emailconfirm');
  $p12_termsconfirm_hash = 'p'.md5($p12_hash.'p12_termsconfirm');

  $p12_usr   = GetVar($p12_username_hash, '', 'string', true, false);
  $p12_email = GetVar($p12_email_hash,    '', 'string', true, false);

  $max_usr_length = $p12_settings['max_username_length'];
  $max_usr_length = (empty($max_usr_length) || $max_usr_length < 13) ? 13 : (int)$max_usr_length;
  $max_usr_length = ($max_usr_length > 64) ? 64 : $max_usr_length;

  //SD350: create registration smarty template and assign values
  $tmpl = SD_Smarty::getNew();
  $tmpl->assign('ucp_basic', SDUserCache::IsBasicUCP());
  $tmpl->assign('loggedin', $userinfo['loggedin'] && empty($login_errors_arr));
  $tmpl->assign('SecurityFormToken', PrintSecureToken('p12_token'));
  $tmpl->assign('max_usr_length', $max_usr_length);
  if(!empty($errors_arr))
  {
    #DisplayMessage($errors_arr, true,'');
    $tmpl->assign('errors', empty($errors_arr)?false:implode('<br />',$errors_arr));
  }
  else
  {
    // Hidden div for error messages generated by JS validation
    $tmpl->assign('errors', '<div class="alert alert-danger" style="display: none;"></div>');
  }

  $tmpl->assign('phrases', $p12_language);
  $tmpl->assign('p12_username_hash', $p12_username_hash);
  $tmpl->assign('p12_password_hash', $p12_password_hash);
  $tmpl->assign('p12_passwordconfirm_hash', $p12_passwordconfirm_hash);
  $tmpl->assign('p12_email_hash', $p12_email_hash);
  $tmpl->assign('p12_emailconfirm_hash', $p12_emailconfirm_hash);
  $tmpl->assign('p12_usr', $p12_usr);
  $tmpl->assign('p12_email', $p12_email);
  $cap = DisplayCaptcha(false,'p12');
  $tmpl->assign('p12_captcha', $cap);

  // Terms/Conditions display
  $p12_settings['display_terms'] = false;
  $tmpl->assign('p12_termsconfirm_hash', $p12_termsconfirm_hash);
  $terms = empty($p12_settings['terms_and_conditions_display']) ? '' : unhtmlspecialchars(trim($p12_settings['terms_and_conditions_display']));
  if(strlen($terms))
  {
    $p12_settings['display_terms'] = true;
    $p12_settings['terms_and_conditions_display'] = $terms;
  }
  $tmpl->assign('settings', $p12_settings);

  //SD343: insert invisible "honeypot" input field in between
  // the regular form fields to randomize the fields' order and
  // thus throw off spammers/bots if
  $max_fields = 5;
  if(!empty($p12_settings['display_terms'])) $max_fields++;
  if(!empty($p12_settings['show_generate_password'])) $max_fields++;
  if(function_exists('mt_rand'))
    $honeypot_idx = mt_rand (1,$max_fields);
  else
    $honeypot_idx = rand(1,$max_fields);
  $filler = str_repeat('raquo;',$honeypot_idx);
  $honeypot = array(
    'outer_class' => 'ctrlHolder" style="display:none;visibility:hidden',
    'input_name'  => $p12_honeypot_hash,
    'input_id'    => $p12_honeypot_hash,
    'input_class' => 'textInput auto',
    'input_type'  => 'text',
    'input_value' => $p12_usr,
    'input_attr'  => ' maxlength="30" autocomplete="off" ',
    'label_text'  => $sdlanguage['msg_do_not_enter_anything'],
    'extra_html'  => '',
    'do_honepot'  => false
  );

  $tmpl->assign('honeypot', $honeypot);
  $tmpl->assign('honeypot_idx', $honeypot_idx);

  // Build array enlisting all form fields:
  $idx = 1;
  $fields = array();
  $fields[] = array(
    'outer_class' => 'ctrlHolder',               #<div class="ctrlHolder">
    'input_name'  => $p12_username_hash,         #<label for="{$p12_email_hash}">
    'input_id'    => $p12_username_hash,
    'input_class' => 'textInput auto',           #<input class="textInput auto" ...
    'input_type'  => 'text',
    'input_value' => $p12_usr,
    'input_attr'  => ' maxlength="'.$max_usr_length.'" ',
    'label_text'  => $p12_language['user_name'], #{$phrases.email}</label>
    'extra_html'  => '    <img id="p12_checkimg1" src="includes/css/images/blank.gif" alt="" width="16" height="16" style="display:none;" />'."\r\n".
                     '      <span id="p12_err_usr"></span>'."\r",
    'do_honepot'  => ($honeypot_idx==$idx)
  );
  $idx++;
  $fields[] = array(
    'outer_class' => 'ctrlHolder',
    'input_name'  => $p12_password_hash,
    'input_id'    => $p12_password_hash,
    'input_class' => 'textInput auto',
    'input_type'  => 'password',
    'input_value' => '',
    'input_attr'  => ' maxlength="30" autocomplete="off" ',
    'label_text'  => $p12_language['password'],
    'extra_html'  => '    <span id="p12_err_pwd"></span>',
    'do_honepot'  => ($honeypot_idx==$idx)
  );
  $idx++;
  $fields[] = array(
    'outer_class' => 'ctrlHolder',
    'input_name'  => $p12_passwordconfirm_hash,
    'input_id'    => $p12_passwordconfirm_hash,
    'label_text'  => $p12_language['password_again'],
    'input_class' => 'textInput auto',
    'input_type'  => 'password',
    'input_value' => '',
    'input_attr'  => ' maxlength="30" autocomplete="off" ',
    'extra_html'  => '    <span id="p12_err_pwdc"></span>',
    'do_honepot'  => ($honeypot_idx==$idx)
  );
  $idx++;
  if(!empty($p12_settings['show_generate_password']))
  {
    $fields[] = array(
      'outer_class' => 'ctrlHolder',
      'input_name'  => 'p12_random',
      'input_id'    => 'p12_random',
      'input_class' => '',
      'input_type'  => 'text',
      'input_value' => '',
      'input_attr'  => ' readonly="readonly" size="14" ',
      'pre_html'    => '<a class="link-password" id="p12_pwd_gen" href="javascript:void();">'.$p12_language['generate_password'].'</a>'.
                       '&nbsp;<a class="link-password" id="p12_pwd_use" style="display: inline;" href="javascript:void();">'.
                       $p12_language['use_random_password'].'</a><br />',
      'label_text'  => $p12_language['random_password'],
      'extra_html'  => '',
      'do_honepot'  => ($honeypot_idx==$idx)
    );
    $idx++;
  }
  $fields[] = array(
    'outer_class' => 'ctrlHolder',
    'input_name'  => $p12_email_hash,
    'input_id'    => $p12_email_hash,
    'input_class' => 'textInput auto',
    'input_type'  => 'text',
    'input_value' => $p12_email,
    'input_attr'  => ' autocomplete="off" ',
    'label_text'  => $p12_language['email'],
    'extra_html'  => '<img id="p12_checkimg2" src="includes/css/images/blank.gif" alt="" width="16" height="16" style="display:none;" />'.
                     "\r\n    ".'<span id="p12_err_email"></span>',
    'do_honepot'  => ($honeypot_idx==$idx)
  );
  $idx++;
  $fields[] = array(
    'outer_class' => 'ctrlHolder',
    'input_name'  => $p12_emailconfirm_hash,
    'input_id'    => $p12_emailconfirm_hash,
    'input_class' => 'textInput auto',
    'input_type'  => 'text',
    'input_value' => $p12_email,
    'input_attr'  => ' autocomplete="off" ',
    'label_text'  => $p12_language['email_again'],
    'extra_html'  => '<span id="p12_err_emailc"></span>',
    'do_honepot'  => ($honeypot_idx==$idx)
  );
  $idx++;
  if(!empty($p12_settings['display_terms']))
  {
    $fields[] = array(
      'outer_class' => 'ctrlHolder',
      'input_name'  => 'p12_terms_text',
      'input_id'    => 'p12_terms_text',
      'input_class' => '',
      'input_type'  => 'textarea',
      'input_value' => $p12_settings['terms_and_conditions_display'],
      'input_attr'  => ' readonly="readonly" ',
      'label_text'  => $p12_language['lbl_terms_conditions'],
      'extra_html'  => '<div class="textInput formHint">'.$p12_settings['terms_and_conditions_display'].'</div>',
      'do_honepot'  => false
    );
    $fields[] = array(
      'outer_class' => 'ctrlHolder',
      'input_name'  => $p12_termsconfirm_hash,
      'input_id'    => '',
      'input_class' => 'formHint',
      'input_type'  => 'yesno',
      'input_value' => '0',
      'input_attr'  => '',
      'label_text'  => $p12_language['lbl_terms_conditions'],
      'pre_html'    => $p12_language['lbl_terms_conditions_hint'].'<br />',
      'extra_html'  => '',
      'do_honepot'  => ($honeypot_idx==$idx)
    );
    $idx++;
  }

  // Display user profile fields (if configured)
  $tmpl->assign('custom_fields', '');
  include_once(SD_INCLUDE_PATH.'class_userprofile.php');
  $userdata = array();
  // **********************************************************************
  // *** Buffer output of custom profile fields
  // **********************************************************************
  foreach(SDProfileConfig::$profile_fields AS $field)
  {
    // Only display fields, that are configured to be visible, to show up on
    // registration form and are not in the credentials group (1):
    if(!empty($field['visible']) && !empty($field['reg_form']) && empty($field['readonly']) && ($field['groupname_id'] > 1))
    {
      if(!empty($errors_arr))
      {
        if($userdata[$field['name']] = GetVar($field['name'], null, 'string', true, false))
        {
          if($field['type']=='date')
          {
            $userdata[$field['name']] = sd_CreateUnixTimestamp($userdata[$field['name']]);
          }
        }
      }
      SDProfileConfig::SetUserdata($userdata);
      $fields[] = $UserProfile->GetProfileInputForTemplate($field, false);
    }
  }
  $tmpl->assign('form_fields_count', $idx);
  $tmpl->assign('form_fields', $fields);

  if(strlen($UserProfile->js_output))
  {
    $tmpl->assign('p12_js', '
  <script type="text/javascript">
  if(typeof(jQuery) !== "undefined"){
  jQuery(document).ready(function() {
    jQuery.validator.setDefaults({
      highlight:   function(input) { jQuery(input).addClass("ui-state-highlight"); },
      unhighlight: function(input) { jQuery(input).removeClass("ui-state-highlight"); }
    });
    if (typeof myBbcodeSettings !== "undefined") {
      $("textarea.ucp_bbcode").markItUp(myBbcodeSettings);
    }

    ' . $UserProfile->js_output.'
  })
  }
  </script>
  ');
  }

  SD_Smarty::display(12, 'registration.tpl', $tmpl);

} //p12_DisplayRegistrationForm


// ############################################################################
// REGISTER USER
// ############################################################################

function p12_RegisterUser()
{
  global $DB, $categoryid, $sdlanguage, $usersystem, $UserProfile, $sdurl,
         $mainsettings, $sd_modules, $p12_language, $p12_settings,
         $p12_hash, $p12_honeypot_hash;

  if(!defined('ZB_BLOCK')) sleep(3); # distraction
  // SD313: security check against spam/bot submissions
  if(!CheckFormToken('p12_token', false))
  {
    RedirectFrontPage(RewriteLink('index.php?categoryid=' . $categoryid),
                      '<strong>'.$sdlanguage['error_invalid_token'].'</strong><br />',2,true);
    return;
  }

  if(sd_IsIPBanned(USERIP, $p12_settings['banned_ip_addresses'])) //SD342
  {
    DisplayMessage($sdlanguage['you_are_banned'], true, '');
    return false;
  }
  //SD343: now requires JS to be enabled
  if(empty($_POST['js']) ||
     (isset($sd_modules) && !empty($sd_modules->Modules['bad-behavior']['enabled']) && empty($_POST['bb2_screener_'])))
  {
    p12_DisplayRegistrationForm();
    return false;
  }

  $errors_arr = array();

  $p12_username_hash = 'p'.md5($p12_hash.'p12_username');
  $p12_password_hash = 'p'.md5($p12_hash.'p12_password');
  $p12_passwordconfirm_hash = 'p'.md5($p12_hash.'p12_passwordconfirm');
  $p12_email_hash           = 'p'.md5($p12_hash.'p12_email');
  $p12_emailconfirm_hash    = 'p'.md5($p12_hash.'p12_emailconfirm');

  $p12_username        = GetVar($p12_username_hash, '', 'string',true,false);
  $p12_password        = GetVar($p12_password_hash, '', 'string',true,false);
  $p12_passwordconfirm = GetVar($p12_passwordconfirm_hash, '', 'string',true,false);
  $p12_email           = GetVar($p12_email_hash, '', 'string',true,false);
  $p12_emailconfirm    = GetVar($p12_emailconfirm_hash, '', 'string',true,false);
  $p12_honeypot        = GetVar($p12_honeypot_hash, '', 'string',true,false);

  $max_usr_length = empty($p12_settings['max_username_length'])?0:(int)$p12_settings['max_username_length'];
  $max_usr_length = Is_Valid_Number($max_usr_length,13,13,64);

  $min_usr_length = empty($p12_settings['min_username_length'])?0:(int)$p12_settings['min_username_length'];
  $min_usr_length = Is_Valid_Number($min_usr_length,3,3,20);

  $min_pwd_length = empty($p12_settings['min_password_length'])?0:(int)$p12_settings['min_password_length'];
  $min_pwd_length = Is_Valid_Number($min_pwd_length,5,5,20);

  $p12_username_org = isset($_POST[$p12_username_hash])?unhtmlspecialchars($_POST[$p12_username_hash]):'';
  $p12_username_org = ($p12_username_org == SanitizeInputForSQLSearch($p12_username_org,false,false) ? $p12_username_org : '');

  if(empty($p12_username_org) || sd_IsUsernameInvalid($p12_username_org))
    $p12_username = '';
  else
    $p12_username = $DB->escape_string(trim($p12_username_org));

  if(!empty($p12_honeypot) || strlen($p12_honeypot)) //SD343: if filled, it's a spammer!
  {
    $errors_arr[] = $p12_language['invalid_username'];
    WatchDog('Registration',$sdlanguage['msg_spam_trap_triggered'].
             ' IP: <span class="ipaddress">'.USERIP.'</span>',
             WATCHDOG_NOTICE);
  }
  else
  // SD313: check min length of username corresponding to settings
  if(empty($p12_username))
  {
    $errors_arr[] = $p12_language['invalid_username'];
  }
  else
  if(strlen($p12_username) < $min_usr_length)
  {
    $errors_arr[] = str_replace('#d#', $min_usr_length, $p12_language['username_too_short']);
  }
  else
  // SD313: check max length of username corresponding to settings
  if(strlen($p12_username) > $max_usr_length)
  {
    $errors_arr[] = str_replace('#d#', $max_usr_length, $p12_language['username_too_long']);
  }

  // SD313: check for invalid characters in password
  $pwd_length = strlen($p12_password);
  $invalid_regex = '#[\'"\r\n\t]#';
  if($pwd_length && ($p12_password != preg_replace($invalid_regex, '', $p12_password)))
  {
    $errors_arr[] = $p12_language['enter_alnum_password'];
  }
  else
  if(!$pwd_length || ($pwd_length < $min_pwd_length))
  {
    $errors_arr[] = str_replace('#d#', $min_pwd_length, $p12_language['password_too_short']);
  }
  if(strcmp($p12_password, $p12_passwordconfirm) !== 0) // 0 means they are a match
  {
    $errors_arr[] = $p12_language['password_unmatched'];
  }
  //SD343: password safety check requiring at least 4 different characters
  if(empty($errors_arr))
  {
    $lcpwd = strtolower($p12_password);
    $chars = count_chars($p12_password,1);
    if((count($chars) < 4) || ($lcpwd=='1q2w3e4r') ||
       strstr($lcpwd,'subdreamer') ||
       strstr($lcpwd,'pwd') ||
       strstr($lcpwd,'passwd') ||
       strstr($lcpwd,'password') ||
       strstr($lcpwd,'p455w0rd') ||
       strstr($lcpwd,'123456abcd') ||
       strstr($lcpwd,'1234567890q') ||
       substr_count('1234567890',$p12_password) ||
       substr_count('0987654321',$p12_password) ||
       substr_count('abcdefghijklmnopqrstuvwxyz',strtolower($p12_password))
       )
    {
      $errors_arr[] = $p12_language['password_unsecure'];
    }
  }

  // SD313: password must be different from username
  if(empty($errors_arr))
  {
    if($p12_username == $p12_password)
    {
      $errors_arr[] = $p12_language['pwd_different_username'];
    }
  }

  // SD313: email must be at least 6 characters long like "x@y.zz"!
  // check to make sure they entered a valid email address
  if((strlen($p12_email) < 7) || !IsValidEmail($p12_email))
  {
    $errors_arr[] = $p12_language['unvalid_email'];
  }
  else if(sd_IsEmailBanned($p12_email))
  {
    $errors_arr[] = $p12_language['email_banned'];
  }
  else if($p12_email != $p12_emailconfirm)
  {
    $errors_arr[] = $p12_language['email_unmatched'];
  }
  else if($p12_email != preg_replace($invalid_regex, '', $p12_email)) //SD343
  {
    $errors_arr[] = $p12_language['unvalid_email'];
  }
  else
  {
    if(empty($errors_arr) && $DB->query_first("SELECT email FROM {users} WHERE email = '%s'", $p12_email))
    {
      $errors_arr[] = $p12_language['email_exists'];
    }
  }
  //SD343: support for StopForumSpam.com
  if(empty($errors_arr) && !empty($p12_settings['enable_sfs_antispam']) && function_exists('sd_sfs_is_spam'))
  {
    if(sd_sfs_is_spam($p12_email,USERIP))
    {
      $errors_arr[] = $p12_language['unvalid_email'];
      WatchDog('Registration','<b>StopForumSpam: '.$p12_username.'</b>, Email: <b>'.$p12_email.'</b>, IP: </b><span class="ipaddress">'.USERIP.'</span></b>',
               WATCHDOG_ERROR);
    }
  }
  //SD343: support for several blocklist providers
  $blacklisted = false;
  if(empty($errors_arr) && function_exists('sd_reputation_check'))
  {
    $blacklisted = sd_reputation_check(USERIP, 12);
    if($blacklisted !== false)
    {
      $errors_arr[] = trim($sdlanguage['ip_listed_on_blacklist'].' '.USERIP);
      WatchDog('Registration','<b>'.$blacklisted.'</b>: IP: <b><span class="ipaddress">'.USERIP.'</span></b>, Username: <b>'.$p12_username.'</b>, Email: <b>'.$p12_email.'</b>',
               WATCHDOG_ERROR);
    }
  }

  if(empty($errors_arr) && $DB->query_first("SELECT username FROM {users} WHERE trim(username) = '%s'", $p12_username))
  {
    $errors_arr[] = $p12_language['username_exists'];
  }

  if(!CaptchaIsValid('p12'))
  {
    $errors_arr[] = $sdlanguage['captcha_not_valid'];
  }

  //SD360: new p12 setting to check against allowed email domains
  if(!sd_IsEmailDomainAllowed($p12_email))
  {
    $errors_arr[] = $p12_language['unvalid_email'];
  }

  // Perform at last an email domain check (if server allows it)
  // check allow_url_fopen? ini_get?
/*
  if(empty($errors_arr) && ini_get('allow_url_fopen') && function_exists('fsockopen'))
  {
    // Only check email's domain if fsockopen actually works,
    // so test it with google domain first...
    $oldReporting = error_reporting();
    error_reporting(0);
    try {
      if(@fsockopen('google.com', 80))
      {
        list($localPart, $domainPart) = @explode('@', $p12_email, 2);
        if(@!fsockopen($domainPart, 80, $err_num, $err_str))
        {
          $errors_arr[] = $p12_language['unvalid_email'];
        }
      }
    }
    catch (Exception $e) { }
    error_reporting($oldReporting);
  }
*/
  $terms = empty($p12_settings['terms_and_conditions_display']) ? '' : trim($p12_settings['terms_and_conditions_display']);
  $p12_termsconfirm = GetVar('p'.md5($p12_hash.'p12_termsconfirm'), '', 'string',true,false);
  if(strlen($terms) && empty($p12_termsconfirm))
  {
    $errors_arr[] = $p12_language['error_must_accept_terms'];
  }

  // #####################################################
  // Process any visible user profile fields
  // #####################################################
  if(!$blacklisted)
  foreach(SDProfileConfig::$profile_fields AS $field)
  {
    // Skip "invisible"/"hidden" inputs or special fields
    if( (substr($field['name'],0,2)=='p_') || !empty($field['accessible']) ||
        !empty($field['ucp_only']) || empty($field['reg_form']) ||
        empty($field['visible']) || ($field['type']=='hidden') ||
        !isset($_POST[$field['name']]))
    {
      continue;
    }

    $name = $field['name'];
    $fieldnum = $field['fieldnum'];

    if($field['type']=='date')
    {
      $value = GetVar($field['name'],'','string',true,false);
      $value = sd_CreateUnixTimestamp($value, '');
    }
    else
    {
      $value = GetVar($name,null,$field['vartype'],true,false);
      if(!isset($value) && ($field['vartype']=='string'))
      {
        $value = '';
      }
    }

    if(!empty($field['reg_form']) && !empty($field['reg_form_req']) &&
       ( ((($field['type']=='text') || ($field['type']=='bbcode')) && (!isset($value) || !strlen($value))) ||
         (($field['type']!='date') && ($field['vartype']=='integer') && (empty($value) || ($value < 1))) )
      )
    {
      $errors_arr[] = SDProfileConfig::$phrases['msg_fill_out_field'] . ' ' . $field['label'];
    }
    else
    if(isset($value) && !count($errors_arr))
    {
      if(($field['type']!='date') && ($field['vartype']=='integer') && (empty($value) || !is_numeric($value))) $value = 0;
      if(($field['vartype']=='bool'))
      {
        if(!empty($value) && (($value=='1') || ($value=='true')))
        {
          $value = 1;
        }
        else
        {
          $value = 0;
        }
      }
      $upd_fields[] = "`$name` = '$value'";
    }
  } //foreach

  // register if there are no errors
  if(empty($errors_arr))
  {
    $salt = sd_generate_user_salt();
    $p12_password = md5($salt.md5($p12_password));
    $default_group = empty($p12_settings['default_signup_usergroup']) ? 3 : (int)$p12_settings['default_signup_usergroup'];
    $default_group = Is_Valid_Number($default_group,3,3,999999); //SD342: do not allow admin/mod group as default
    $tbl = PRGM_TABLE_PREFIX.'users';
    if(!empty($p12_settings['require_email_activation']))
    {
      $key = CreateGuid();
      if($DB->column_exists($tbl,'register_ip'))
      {
        $DB->query("INSERT INTO $tbl (usergroupid, username, password, salt, use_salt, email, activated, validationkey, validation_time, joindate, register_ip)
                    VALUES (%d, '%s', '%s', '%s', 1, '%s', 0, '%s', %d, %d, '%s')",
                    $default_group, $p12_username, $p12_password, $DB->escape_string($salt), $p12_email, $key, TIME_NOW, TIME_NOW, USERIP);
      }
      else
      {
        $DB->query("INSERT INTO $tbl (usergroupid, username, password, salt, use_salt, email, activated, validationkey, validation_time, joindate)
                    VALUES (%d, '%s', '%s', '%s', 1, '%s', 0, '%s', %d, %d)",
                    $default_group, $p12_username, $p12_password, $DB->escape_string($salt), $p12_email, $key, TIME_NOW, TIME_NOW);
      }
      if($userid = $DB->insert_id())
      {
        // send activation link email
        $subject = $p12_language['email_subject_activation'];
        $validateurl = str_replace('&amp;', '&', RewriteLink('index.php?categoryid=' . $categoryid . '&p12_val=' . $key));
        $message = $p12_username . ',<br>'.
                   $p12_language['email_message_activation'].'<br><br>'.
                   '<a href="'.$validateurl.'">'.$validateurl.'</a>';

        mail($p12_email, $subject, $message, $p12_settings['welcome_message_email_from'],
                  $p12_settings['welcome_message_email_sender'], null, null, true);

        echo $p12_language['activation_required'];
      }
    }
    else
    {
      $active = empty($p12_settings['require_admin_activation']) ? 1 : 0; //SD342
      if($DB->column_exists($tbl,'register_ip'))
      {
        $DB->query("INSERT INTO $tbl (usergroupid, username, password, salt, use_salt, email, activated, validation_time, joindate, register_ip)
                    VALUES (%d, '%s', '%s', '%s', 1, '%s', %d, 0, %d, '%s')",
                    $default_group, $p12_username, $p12_password, $DB->escape_string($salt),
                    $p12_email, $active, TIME_NOW, USERIP);
      }
      else
      {
        $DB->query("INSERT INTO $tbl (usergroupid, username, password, salt, use_salt, email, activated, validation_time, joindate)
                    VALUES (%d, '%s', '%s', '%s', 1, '%s', %d, 0, %d)",
                    $default_group, $p12_username, $p12_password, $DB->escape_string($salt),
                    $p12_email, $active, TIME_NOW);
      }
      if($userid = $DB->insert_id())
      {
        $doAdminEmail = empty($p12_settings['new_registration_admin_usage'])?0:(int)$p12_settings['new_registration_admin_usage']; //SD370
        if($active)
        {
          // registration successful
          p12_SendWelcomeMessage($userid); //SD342
          echo $p12_language['register_success'];
        }
        else
        {
          // registration requires admin activation //SD342
          echo $p12_language['registration_awaits_approval'];
        }
        //SD370: send admin notification email depending on new option
        if( ($doAdminEmail == 2) ||               # always
            (!$active && ($doAdminEmail == 0)) || # if admin activation is required (default)
            ( $active && ($doAdminEmail == 1)) )  # if admin activation is not required
        {
          p12_SendAdminApprovalMessage($userid); //SD343
        }
      }
    }

    if($userid)
    {
      if(!empty($mainsettings['log_new_user_registrations'])) //SD343
      {
        @error_reporting(ERROR_LOG_LEVEL);
        $p12_username = '<a href="'.SITE_URL.ADMIN_PATH.'/users.php?action=display_user_form&userid='.$userid.'">'.$p12_username.'</a>';
        WatchDog('Registration',$p12_language['new_user_registration'].
                 ' <strong>'.$p12_username.'</strong> (IP: <span class="ipaddress">'.USERIP.'</span>)',
                 WATCHDOG_NOTICE);
      }
      //SD342 Load profile fields and update user data
      $UserProfile->LoadUser($userid);
      $DB->ignore_error = true;
      $DB->query("INSERT INTO {users_data} (usersystemid,userid,authorname,user_text) VALUES (%d,%d,'','')",
                 $usersystem['usersystemid'], $userid);
      $DB->ignore_error = false;

      $prev_form_token = $UserProfile->form_token;
      $UserProfile->form_token = 'p12_token';
      $UserProfile->UseFormData = true;
      $UserProfile->UpdateProfile(true, false, $userid);
      $UserProfile->form_token = $prev_form_token;
    }
  }
  else
  {
    p12_DisplayRegistrationForm($errors_arr);
  }

} //p12_RegisterUser


// ############################################################################
// SELECT FUNCTION
// ############################################################################

$p12_language = GetLanguage(12);
//SD342: moved to init.php
//$p12_settings = GetPluginSettings(12);

if(empty($userinfo['loggedin']) && !SD_IS_BOT)
{
  //SD322: forum integration support re-added
  if($usersystem['name'] == 'Subdreamer')
  {
    $showForm = False;
    if(isset($_GET['p12_val']) && !isset($_POST['p12_register']) && !isset($_POST['p12_pwdreset']))
    {
      p12_Validation($_GET['p12_val']);
    }
    else if(isset($_POST['p12_register']) && !isset($_POST['p12_pwdreset']))
    {
      p12_RegisterUser();
    }
    else if(!empty($_POST['p12_pwdreset']))
    {
      if(empty($p12_settings['disable_forgot_password'])) //SD342
      {
        p12_ResetPassword();
      }
      else
      {
        $showForm = true;
      }
    }
    else if(isset($_GET['p12_forgotpwd']))
    {
      if(empty($p12_settings['disable_forgot_password'])) //SD342
      {
        p12_ForgotPasswordForm(NULL);
      }
      else
      {
        $showForm = true;
      }
    }
    else
    {
      $showForm = true;
    }

    if($showForm) //SD342
    {
      if(IsIPBanned(USERIP, $p12_settings['banned_ip_addresses']))
      {
        DisplayMessage($sdlanguage['you_are_banned'], true, '');
        $showForm = false;
      }
      else
      if(!empty($p12_settings['prohibit_multiple_users_per_ip']))
      {
        $DB->ignore_error = true;
        if($res=$DB->query_first("SELECT userid,register_ip FROM {users} WHERE register_ip = '%s'", USERIP))
        {
          DisplayMessage($p12_language['ip_address_not_allowed'], true, '');
          $showForm = false;
        }
        $DB->ignore_error = false;
      }
    }

    if($showForm)
    {
      p12_DisplayRegistrationForm(NULL);
    }
  }
  else
  if(function_exists('ForumLink'))
  {
    echo '<a href="' . ForumLink(1) . '">' . $p12_language['register_now'] . '</a>';
  }
}
else
{
  echo '<br />'.$p12_language['already_logged_in'] . ' ' . $userinfo['username'] . '<br />
        <a href="' . RewriteLink('index.php?categoryid=' . $categoryid . '&logout=1') . '">' . $p12_language['logout'] . '</a><br />';
}

unset($p12_hash,$p12_honeypot_hash); //SD343
